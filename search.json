[{"path":"https://fdp.louisaslett.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://fdp.louisaslett.com/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://fdp.louisaslett.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Louis Aslett. Author, maintainer, copyright holder.","code":""},{"path":"https://fdp.louisaslett.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aslett L (2025). fdp: f-Differential Privacy Gaussian Differential Privacy. R package version 1.0.0, https://fdp.louisaslett.com/.","code":"@Manual{,   title = {fdp: f-Differential Privacy and Gaussian Differential Privacy},   author = {Louis Aslett},   year = {2025},   note = {R package version 1.0.0},   url = {https://fdp.louisaslett.com/}, }"},{"path":"https://fdp.louisaslett.com/index.html","id":"id_-fdp-r-package-","dir":"","previous_headings":"","what":"f-Differential Privacy and Gaussian Differential Privacy","title":"f-Differential Privacy and Gaussian Differential Privacy","text":"fdp package provides tools working ff-differential privacy, powerful framework generalises traditional differential privacy definitions. package allows construct, visualise, analyse trade-functions show optimal relationship Type Type II errors distinguishing outputs neighboring datasets. initial release basic functionality may extended time composition results privacy accountants. present hopefully helps researchers area quickly produce ff-DP visualisations used papers etc. Please cite software use . package based ff-differential privacy/Gaussian differential privacy framework introduced Dong, Roth, Su (2022) “Gaussian Differential Privacy” (Journal Royal Statistical Society Series B, https://doi.org/10.1111/rssb.12454). nice overview Gaussian differential privacy available Gomez et al. (2025) https://arxiv.org/abs/2503.10945.","code":""},{"path":"https://fdp.louisaslett.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"f-Differential Privacy and Gaussian Differential Privacy","text":"can install package CRAN: install development version GitHub:","code":"install.packages(\"fdp\") # install.packages(\"remotes\") remotes::install_github(\"louisaslett/fdp\")"},{"path":"https://fdp.louisaslett.com/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"f-Differential Privacy and Gaussian Differential Privacy","text":"basic examples using fdp package:","code":""},{"path":"https://fdp.louisaslett.com/index.html","id":"plotting-gaussian-differential-privacy","dir":"","previous_headings":"Example","what":"Plotting Gaussian Differential Privacy","title":"f-Differential Privacy and Gaussian Differential Privacy","text":"","code":"library(fdp)  # Plot a single GDP trade-off function with μ = 1 fdp(gdp(1))"},{"path":"https://fdp.louisaslett.com/index.html","id":"comparing-privacy-mechanisms","dir":"","previous_headings":"Example","what":"Comparing Privacy Mechanisms","title":"f-Differential Privacy and Gaussian Differential Privacy","text":"","code":"# Compare Gaussian DP with classical (ε, δ)-DP fdp(   \"Gaussian DP\" = gdp(1.0),   \"Classical DP\" = epsdelta(1.0),   \"Approximate DP\" = epsdelta(1.3, 0.05),   .legend = \"Privacy Mechanism\" )"},{"path":"https://fdp.louisaslett.com/index.html","id":"estimating-privacy-parameters","dir":"","previous_headings":"Example","what":"Estimating Privacy Parameters","title":"f-Differential Privacy and Gaussian Differential Privacy","text":"","code":"# Define empirical trade-off points from a privacy audit empirical_points <- data.frame(   alpha = c(0.00, 0.05, 0.10, 0.25, 0.50, 1.00),   beta  = c(1.00, 0.93, 0.87, 0.72, 0.43, 0.00) )  # Find the GDP parameters that lower bound these points gdp_bound <- est_gdp(empirical_points) gdp_bound  # Visualize the fit fdp(empirical_points, gdp_bound)"},{"path":"https://fdp.louisaslett.com/index.html","id":"working-with-the-laplace-mechanism","dir":"","previous_headings":"Example","what":"Working with the Laplace Mechanism","title":"f-Differential Privacy and Gaussian Differential Privacy","text":"detailed examples documentation, see package vignettes function help pages.","code":"# Create trade-off function for Laplace mechanism with scale parameter 1.5 lap_mechanism <- lap(1.5)  # Find its GDP lower bound gdp_equiv <- est_gdp(lap_mechanism)  # Compare them fdp(lap_mechanism, gdp_equiv)"},{"path":"https://fdp.louisaslett.com/reference/epsdelta.html","id":null,"dir":"Reference","previous_headings":"","what":"(epsilon, delta)-differential privacy trade-off function — epsdelta","title":"(epsilon, delta)-differential privacy trade-off function — epsdelta","text":"Constructs trade-function corresponding classical \\((\\varepsilon, \\delta)\\)-differential privacy guarantee. f-DP representation approximate differential privacy definition, allows small probability \\(\\delta\\) privacy breach (\\(\\delta > 0\\)) maintaining \\(\\varepsilon\\)-differential privacy probability \\(1-\\delta\\). resulting trade-function piecewise linear two segments, reflecting geometry \\((\\varepsilon, \\delta)\\)-DP hypothesis testing framework. function returned can called either without arguments retrieve underlying data points, alpha argument evaluate trade-specific Type-error rates.","code":""},{"path":"https://fdp.louisaslett.com/reference/epsdelta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(epsilon, delta)-differential privacy trade-off function — epsdelta","text":"","code":"epsdelta(epsilon, delta = 0)"},{"path":"https://fdp.louisaslett.com/reference/epsdelta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(epsilon, delta)-differential privacy trade-off function — epsdelta","text":"epsilon Numeric scalar specifying \\(\\varepsilon\\) privacy parameter. Must non-negative. delta Numeric scalar specifying \\(\\delta\\) privacy parameter. Must \\([0, 1]\\). Default 0.0 (pure \\(\\varepsilon\\)-DP).","code":""},{"path":"https://fdp.louisaslett.com/reference/epsdelta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(epsilon, delta)-differential privacy trade-off function — epsdelta","text":"function class c(\"fdp_epsdelta_tradeoff\", \"function\") computes \\((\\varepsilon, \\delta)\\)-DP trade-function. called: Without arguments: Returns data frame columns alpha beta containing skeleton points piecewise linear trade-function. alpha argument: Returns data frame columns alpha beta containing Type-II error values corresponding specified Type-error rates.","code":""},{"path":"https://fdp.louisaslett.com/reference/epsdelta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(epsilon, delta)-differential privacy trade-off function — epsdelta","text":"Creates \\((\\varepsilon, \\delta)\\)-differential privacy trade-function use f-DP analysis visualisation. like reminder formal definition \\((\\varepsilon, \\delta)\\)-DP, please see documentation page \"Formal definition\" Section. function returns closure stores \\(\\varepsilon\\) \\(\\delta\\) parameters environment. function can called without arguments supplied, either obtain skeleton particular Type-II error rates given Type-errors respectively.","code":""},{"path":"https://fdp.louisaslett.com/reference/epsdelta.html","id":"formal-definition","dir":"Reference","previous_headings":"","what":"Formal definition","title":"(epsilon, delta)-differential privacy trade-off function — epsdelta","text":"Classical \\((\\varepsilon, \\delta)\\)-differential privacy (Dwork et al., 2006a,b) states randomised mechanism \\(M\\) satisfies \\((\\varepsilon, \\delta)\\)-DP neighbouring datasets \\(S\\) \\(S'\\) differ single observation, event \\(E\\), $$\\mathbb{P}(M(S) \\E) \\le e^\\varepsilon \\mathbb{P}[M(S') \\E] + \\delta$$ f-DP framework (Dong et al., 2022), corresponds specific trade-function, $$f_{\\varepsilon,\\delta} \\colon [0,1] \\[0,1]$$ maps Type-error rates \\(\\alpha\\) minimum achievable Type-II error rates \\(\\beta\\) distinguishing output distributions \\(M(S)\\) \\(M(S')\\). special case \\(\\delta = 0\\) corresponds pure \\(\\varepsilon\\)-differential privacy, trade-function fixed disclosure risk.","code":""},{"path":"https://fdp.louisaslett.com/reference/epsdelta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(epsilon, delta)-differential privacy trade-off function — epsdelta","text":"Dong, J., Roth, . Su, W.J. (2022). “Gaussian Differential Privacy”. Journal Royal Statistical Society Series B, 84(1), 3–37. doi:10.1111/rssb.12454 . Dwork, C., Kenthapadi, K., McSherry, F., Mironov, . Naor, M. (2006a) “Data, : Privacy Via Distributed Noise Generation”. : Advances Cryptology - EUROCRYPT 2006, 486–503. doi:10.1007/11761679_29 . Dwork, C., McSherry, F., Nissim, K. Smith, . (2006b) “Calibrating Noise Sensitivity Private Data Analysis”. : Theory Cryptography, 265–284. doi:10.1007/11681878_14 .","code":""},{"path":[]},{"path":"https://fdp.louisaslett.com/reference/epsdelta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(epsilon, delta)-differential privacy trade-off function — epsdelta","text":"","code":"# Pure epsilon-differential privacy with epsilon = 1 pure_dp <- epsdelta(1.0) pure_dp #> (ε, δ)-Differential Privacy Trade-off Function #>   Parameters: #>     ε = 1 #>     δ = 0 pure_dp()  # View the skeleton points #>       alpha      beta #> 1 0.0000000 1.0000000 #> 2 0.2689414 0.2689414 #> 3 1.0000000 0.0000000  # Approximate DP with epsilon = 1 and delta = 0.01 approx_dp <- epsdelta(1.0, 0.01) approx_dp #> (ε, δ)-Differential Privacy Trade-off Function #>   Parameters: #>     ε = 1 #>     δ = 0.01  # Evaluate at specific Type-I error rates approx_dp(c(0.05, 0.1, 0.25, 0.5)) #>   alpha      beta #> 1  0.05 0.8540859 #> 2  0.10 0.7181718 #> 3  0.25 0.3104295 #> 4  0.50 0.1802609  # Plot and compare different (epsilon, delta) configurations fdp(epsdelta(0.5),     epsdelta(1.0),     epsdelta(1.0, 0.01))   # Compare with Gaussian DP fdp(epsdelta(1.0),     epsdelta(1.0, 0.01),     gdp(1.0),     .legend = \"Privacy Mechanism\")"},{"path":"https://fdp.louisaslett.com/reference/est_epsdelta.html","id":null,"dir":"Reference","previous_headings":"","what":"(epsilon, delta)-differential privacy parameters lower bounding empirical trade-off points — est_epsdelta","title":"(epsilon, delta)-differential privacy parameters lower bounding empirical trade-off points — est_epsdelta","text":"Estimates \\((\\varepsilon, \\delta)\\)-differential privacy parameters lower bound given set empirical trade-points. function uses numerical optimisation identify tightest \\((\\varepsilon, \\delta)\\)-DP guarantee consistent observed Type-/Type-II error trade-offs, holding either \\(\\varepsilon\\) \\(\\delta\\) fixed whilst optimising parameter. Note: due numerical optimisation involved, approximation.","code":""},{"path":"https://fdp.louisaslett.com/reference/est_epsdelta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(epsilon, delta)-differential privacy parameters lower bounding empirical trade-off points — est_epsdelta","text":"","code":"est_epsdelta(x, epsilon = NULL, delta = NULL, dp = 2L)"},{"path":"https://fdp.louisaslett.com/reference/est_epsdelta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(epsilon, delta)-differential privacy parameters lower bounding empirical trade-off points — est_epsdelta","text":"x One f-DP trade-specifications lower bounded. Accepts flexible input types fdp(): function (user-defined built-, e.g., gdp()) called numeric vector alpha returns data frame columns alpha beta; data frame columns alpha beta containing empirical trade-points; numeric vector length 101 (interpreted beta values canonical grid alpha = seq(0, 1, = 0.01)). function extracts Type-/Type-II error coordinates finds minimal \\((\\varepsilon, \\delta)\\)-DP parameters lower bounding . epsilon Optional numeric scalar specifying fixed value \\(\\varepsilon \\ge 0\\). supplied, function searches minimal \\(\\delta \\[0,1]\\) \\((\\varepsilon, \\delta)\\)-DP trade-lower bounds x. Exactly one epsilon delta must specified. Default NULL. delta Optional numeric scalar specifying fixed value \\(\\delta \\[0, 1]\\). supplied, function searches minimal \\(\\varepsilon \\ge 0\\) \\((\\varepsilon, \\delta)\\)-DP trade-lower bounds x. Exactly one epsilon delta must specified. Default NULL. dp Integer scalar specifying number decimal places precision result (careful rounding employed ensure bound holds). Must non-negative integer. Default 2L.","code":""},{"path":"https://fdp.louisaslett.com/reference/est_epsdelta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(epsilon, delta)-differential privacy parameters lower bounding empirical trade-off points — est_epsdelta","text":"\\((\\varepsilon, \\delta)\\)-DP trade-function object (see epsdelta()) class c(\"fdp_epsdelta_tradeoff\", \"function\"). represents tightest \\((\\varepsilon, \\delta)\\)-DP trade-function lower bounds input x.","code":""},{"path":"https://fdp.louisaslett.com/reference/est_epsdelta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(epsilon, delta)-differential privacy parameters lower bounding empirical trade-off points — est_epsdelta","text":"function numerically solves inverse problem f-differential privacy framework: given empirical trade-points \\(\\{(\\alpha_i, \\beta_i)\\}_{=1}^n\\) characterising distinguishability output distributions randomised mechanism neighbouring datasets, find minimal classical \\((\\varepsilon, \\delta)\\)-DP parameters \\((\\varepsilon, \\delta)\\)-DP trade-function lower bounds observed points. Warning: since numerical optimisation finite set trade-points, mathematical guarantee correctness. , \\((\\varepsilon, \\delta)\\) found best viewed approximate lower bound true values, since intermediate trade-points supplied cause true values larger. example, consider:   code return \\(\\varepsilon=1.45\\), yet Corollary 1, p.16, Dong et al. (2022) means exact answer \\((\\varepsilon = 1.45, \\delta = 0.000544\\dots)\\) indeed general exist finite \\(\\varepsilon\\) solution \\(\\delta = 0\\). Note: lower bounding \\(\\mu\\)-Gaussian Differential Privacy one use gdp_to_epsdelta() instead, employs exact theoretical results literature! function may useful post-hoc privacy auditing, privacy budget allocation, mechanism comparison.","code":"est_epsdelta(gdp(0.5)(), delta = 0)"},{"path":"https://fdp.louisaslett.com/reference/est_epsdelta.html","id":"mathematical-formulation","dir":"Reference","previous_headings":"","what":"Mathematical formulation","title":"(epsilon, delta)-differential privacy parameters lower bounding empirical trade-off points — est_epsdelta","text":"\\((\\varepsilon, \\delta)\\)-DP trade-function \\(f_{\\varepsilon,\\delta} \\colon [0,1] \\[0,1]\\) piecewise linear (see epsdelta()). function seeks parameters \\((\\varepsilon, \\delta)\\) $$f_{\\varepsilon,\\delta}(\\alpha_i) \\le \\beta_i \\quad \\text{} = 1, \\ldots, n$$ whilst minimising either \\(\\varepsilon\\) (delta fixed) \\(\\delta\\) (epsilon fixed). Exactly one epsilon delta must specified user; function searches minimal value unspecified parameter. optimisation first verifies whether solution exists within reasonable bounds (\\(\\varepsilon < 30\\) \\(\\delta < 1\\)), constructs objective measuring signed vertical distance empirical points candidate \\((\\varepsilon, \\delta)\\)-DP curve. numerical root finder seeks parameter value crosses zero, solution rounded specified decimal precision (dp). checks rounded bound holds numerically, incremental adjustment necessary guarantee \\(f_{\\varepsilon,\\delta}(\\alpha_i) \\le \\beta_i\\) \\(\\) within machine precision.","code":""},{"path":"https://fdp.louisaslett.com/reference/est_epsdelta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(epsilon, delta)-differential privacy parameters lower bounding empirical trade-off points — est_epsdelta","text":"Dong, J., Roth, . Su, W.J. (2022). “Gaussian Differential Privacy”. Journal Royal Statistical Society Series B, 84(1), 3–37. doi:10.1111/rssb.12454 .","code":""},{"path":[]},{"path":"https://fdp.louisaslett.com/reference/est_epsdelta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(epsilon, delta)-differential privacy parameters lower bounding empirical trade-off points — est_epsdelta","text":"","code":"# Estimate epsilon given fixed delta for empirical trade-off points # Note: unrealistically small set of points, in practice this would be a #       collection of potentially thousands of points representing multiple #       trade-off functions, the collection of which should be lower bounded. empirical <- data.frame(   alpha = c(0.00, 0.05, 0.10, 0.25, 0.50, 1.00),   beta = c(1.00, 0.92, 0.85, 0.70, 0.45, 0.00) ) result <- est_epsdelta(empirical, delta = 0.01) result  # Print the estimated parameters #> (ε, δ)-Differential Privacy Trade-off Function #>   Parameters: #>     ε = 0.34 #>     δ = 0.01  # Estimate delta given fixed epsilon result2 <- est_epsdelta(empirical, epsilon = 1.0) result2 #> (ε, δ)-Differential Privacy Trade-off Function #>   Parameters: #>     ε = 1 #>     δ = 0  # Visualise the fit fdp(empirical, result, .legend = \"Trade-off\")   # Find epsilon bounding a Gaussian DP mechanism with delta = 0.1 and compare # with the exactly computed values gdp_mechanism <- gdp(1.1) approx_dp <- est_epsdelta(gdp_mechanism, delta = 0.1) dp <- gdp_to_epsdelta(1.1, environment(approx_dp)$epsilon) fdp(gdp_mechanism, approx_dp, dp,     .legend = \"Mechanism\")   # Compare precision levels result_2dp <- est_epsdelta(empirical, delta = 0.01, dp = 2L) result_4dp <- est_epsdelta(empirical, delta = 0.01, dp = 4L) fdp(empirical, result_2dp, result_4dp)"},{"path":"https://fdp.louisaslett.com/reference/est_gdp.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian differential privacy parameters lower bounding empirical trade-off points — est_gdp","title":"Gaussian differential privacy parameters lower bounding empirical trade-off points — est_gdp","text":"Estimates minimal Gaussian differential privacy (GDP) parameter \\(\\mu\\) provides valid lower bound collection empirical analytically-derived trade-points. Note: due numerical optimisation involved, approximation.","code":""},{"path":"https://fdp.louisaslett.com/reference/est_gdp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian differential privacy parameters lower bounding empirical trade-off points — est_gdp","text":"","code":"est_gdp(x, dp = 2L)"},{"path":"https://fdp.louisaslett.com/reference/est_gdp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian differential privacy parameters lower bounding empirical trade-off points — est_gdp","text":"x One f-DP trade-specifications lower bounded. Accepts flexible input types fdp(): function (user-defined built-, e.g., lap()) called numeric vector alpha returns data frame columns alpha beta; data frame columns alpha beta containing empirical trade-points; numeric vector length 101 (interpreted beta values canonical grid alpha = seq(0, 1, = 0.01)). function extracts Type-/Type-II error coordinates finds minimal \\((\\varepsilon, \\delta)\\)-DP parameters lower bounding . dp Integer scalar specifying number decimal places precision result (careful rounding employed ensure bound holds). Must non-negative integer. Default 2L.","code":""},{"path":"https://fdp.louisaslett.com/reference/est_gdp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian differential privacy parameters lower bounding empirical trade-off points — est_gdp","text":"GDP trade-function object (see gdp()) class c(\"fdp_gdp_tradeoff\", \"function\"). represents tightest \\(\\mu\\)-GDP trade-function lower bounds input x.","code":""},{"path":"https://fdp.louisaslett.com/reference/est_gdp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gaussian differential privacy parameters lower bounding empirical trade-off points — est_gdp","text":"Given set trade-points \\(\\{(\\alpha_i, \\beta_i)\\}_{=1}^n\\) representing Type-Type-II error rates, function numerically solves smallest \\(\\mu \\ge 0\\) \\(\\mu\\)-GDP trade-function $$G_\\mu(\\alpha) = \\Phi\\left(\\Phi^{-1}(1-\\alpha) - \\mu\\right)$$ satisfies \\(G_\\mu(\\alpha_i) \\le \\beta_i\\) \\(= 1, \\ldots, n\\), \\(\\Phi\\) denotes standard normal cumulative distribution function. Warning: since numerical optimisation finite set trade-points, mathematical guarantee correctness. , \\(\\mu\\) found best viewed approximate lower bound true values, since intermediate trade-points supplied cause true values larger. function may useful post-hoc privacy auditing, privacy budget allocation, mechanism comparison.","code":""},{"path":"https://fdp.louisaslett.com/reference/est_gdp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gaussian differential privacy parameters lower bounding empirical trade-off points — est_gdp","text":"Dong, J., Roth, . Su, W.J. (2022). “Gaussian Differential Privacy”. Journal Royal Statistical Society Series B, 84(1), 3–37. doi:10.1111/rssb.12454 .","code":""},{"path":[]},{"path":"https://fdp.louisaslett.com/reference/est_gdp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gaussian differential privacy parameters lower bounding empirical trade-off points — est_gdp","text":"","code":"# Estimate GDP from manually specified empirical trade-off points # These could come from empirical measurements or privacy audits empirical_points <- data.frame(   alpha = c(0.00, 0.05, 0.10, 0.25, 0.50, 1.00),   beta  = c(1.00, 0.93, 0.87, 0.72, 0.43, 0.00) ) result <- est_gdp(empirical_points) result #> Gaussian Differential Privacy Trade-off Function #>   Parameters: #>     μ = 0.18  # Visualise how well the GDP bound fits the empirical points fdp(empirical_points, result)   # Find the GDP lower bound for a Laplace mechanism. lap_mechanism <- lap(1.5) gdp_bound <- est_gdp(lap_mechanism) gdp_bound #> Gaussian Differential Privacy Trade-off Function #>   Parameters: #>     μ = 1.44  # Compare the Laplace mechanism with its GDP lower bound fdp(lap_mechanism, gdp_bound)   # Control precision with the dp parameter result_1dp <- est_gdp(empirical_points, dp = 1L) result_3dp <- est_gdp(empirical_points, dp = 3L) # Higher precision gives tighter bounds fdp(empirical_points, result_1dp, result_3dp)"},{"path":"https://fdp.louisaslett.com/reference/fdp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fdp: f-Differential Privacy and Gaussian Differential Privacy — fdp-package","title":"fdp: f-Differential Privacy and Gaussian Differential Privacy — fdp-package","text":"Constructs visualises trade-functions f-differential privacy (f-DP) introduced Dong et al. (2022) doi:10.1111/rssb.12454 . Supports Gaussian differential privacy, f-DP generalisation (epsilon, delta)-differential privacy, accepts user-specified optimal type / type II errors lower convex hull trade-function automatically constructed.","code":""},{"path":[]},{"path":"https://fdp.louisaslett.com/reference/fdp-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fdp: f-Differential Privacy and Gaussian Differential Privacy — fdp-package","text":"Maintainer: Louis Aslett louis.aslett@durham.ac.uk (ORCID) [copyright holder]","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot f-differential privacy trade-off functions — fdp","title":"Plot f-differential privacy trade-off functions — fdp","text":"Produce comparative plot one (analytic empirical) f-differential privacy trade-functions.","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot f-differential privacy trade-off functions — fdp","text":"","code":"fdp(..., .legend = NULL, .tol = sqrt(.Machine$double.eps))"},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot f-differential privacy trade-off functions — fdp","text":"... One f-DP trade-specifications. argument can : function (user-defined built-, e.g. gdp(), epsdelta(), lap(), etc) called numeric vector alpha returns data frame columns alpha beta; data frame columns alpha beta; numeric vector length equal internal alpha grid (interpreted beta). Arguments may named control legend labels. See Details full explanation different ways pass arguments. .legend Character string giving legend title. Use NULL (default) title. .tol Numeric tolerance used : Validating \\(\\beta\\), beta <= 1 - alpha + .tol. Checking convexity objects forced draw lines.","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot f-differential privacy trade-off functions — fdp","text":"ggplot2 object class c(\"fdp_plot\", \"gg\", \"ggplot\") displaying supplied trade-functions (points, applicable). can modified additional ggplot2 layers combined fdp_plot objects using +.","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot f-differential privacy trade-off functions — fdp","text":"main plotting function package, produces plots f-differential privacy (f-DP) trade-functions style shown original f-DP paper (Dong et al., 2022). like reminder formal definition f-DP, please see documentation page \"Formal definition\" Section. ... arguments define trade-functions plotted can : Built-analytic trade-function generators gdp(), epsdelta(), lap(). User-defined functions defining trade-functions. Data frames containing alpha beta column. Numeric vectors interpreted sequence beta values canonical grid Type-error rates alpha = seq(0, 1, = 0.01). cover cases detail subsequent sub-sections. discussion two main approaches modifying legend labels.","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"built-in-analytic-trade-off-function-generators","dir":"Reference","previous_headings":"","what":"Built-in analytic trade-off function generators","title":"Plot f-differential privacy trade-off functions — fdp","text":"built-trade-function generators take one arguments specifying level differential privacy, example, gdp(0.5) corresponding \\(\\mu=0.5\\)-Gaussian differential privacy. function calls can passed directly, eg fdp(gdp(0.5)), automatically provide suitable legend names plot, including detail argument specification. example fdp(gdp(0.5)) results legend label \"0.5-GDP\".","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"user-defined-trade-off-functions","dir":"Reference","previous_headings":"","what":"User-defined trade-off functions","title":"Plot f-differential privacy trade-off functions — fdp","text":"Custom trade-functions accept vector Type-error values, \\(\\alpha\\), return corresponding vector Type-II error values, \\(\\beta\\). simplest case, user defined function accept single argument, (unrealistic) perfect privacy setting:   can plotted calling fdp(my_fdp). However, often need pass additional arguments. supported using direct calling mechanism, assume axis offset required unrealistic example:   now called using dummy variable alpha (need defined calling environment), fdp(my_fdp(alpha, 0.1)), produce trade-function curve offset 0.1.","code":"my_fdp <- function(a) {   1 - a } my_fdp <- function(a, off) {   pmax(0, 1 - a - off) }"},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"data-frames","dir":"Reference","previous_headings":"","what":"Data frames","title":"Plot f-differential privacy trade-off functions — fdp","text":"One need define trade-function explicitly, can implicitly defined giving set coordinates \\(\\{(\\alpha_i, \\beta_i)\\}_{=1}^n\\) two-column data frame columns named alpha beta. coordinates linearly interpolated produce trade-function curve. example   Can used produce f-DP curve corresponding \\(\\varepsilon\\approx1.09861\\)-differential privacy calling fdp(my_fdp). course, particular example easily produced using built-analytic trade-function generator epsdelta() calling fdp(epsdelta(1.09861)).","code":"my_fdp <- data.frame(alpha = c(0, 0.25, 1), beta = c(1, 0.25, 0))"},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"numeric-vectors","dir":"Reference","previous_headings":"","what":"Numeric vectors","title":"Plot f-differential privacy trade-off functions — fdp","text":"Finally, possible simply provide vector \\(\\beta\\) values grid \\(\\alpha\\) values fdp() uses internally plotting — , values seq(0.0, 1.0, = 0.01). example,   produce (unrealistic) perfect f-DP privacy curve calling fdp(my_fdp).","code":"a <- seq(0.0, 1.0, by = 0.01) my_fdp <- 1 - a"},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"legend-labels","dir":"Reference","previous_headings":"","what":"Legend labels","title":"Plot f-differential privacy trade-off functions — fdp","text":"discussed , built-analytic trade-function generators provide automatic legend labels make sense particular trade-function. cases, default legend label equal function, data frame, numeric vector variable name used calling fdp(). Thus, examples my_fdp used name function/data frame/vector default legend label simply \"my_fdp\". default can overridden two ways: using argument name. example, set legend label \"hello\" user-defined function offset, one call fdp(hello = my_fdp(alpha, 0.1)). also works spaces special characters using backtick quoted argument names, example fdp(`cool!` = my_fdp(alpha, 0.1)). modifying object passed fdp_name() advance. See help file function details.","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"drawing-method-and-validation","dir":"Reference","previous_headings":"","what":"Drawing method and validation","title":"Plot f-differential privacy trade-off functions — fdp","text":"default, built-user-defined function arguments plotted trade-function curve. means first checked ensure rendered line indeed valid trade-function: , convex, non-increasing less \\(1-\\alpha\\) (however, technically continuity checked finite number calls black-box function). problem detected error thrown. Note due finite precision nature computers, might validity checks throw false alarm, case may use .tol argument increase tolerance within validity checks must pass. contrast, data frame/vector arguments plotted differently depending size. least 100 rows/elements treated way built-user-defined function arguments, trade-function validity checks. However, fewer rows/elements, treated merely collection points, check lie \\(\\beta = 1-\\alpha\\) line. points plotted, together lower convex hull corresponds lower bounding trade-function collection points. default behaviour validating drawing line versus computing lower convex hull plotting points can controlled fdp_point() fdp_line() functions. See help files details. final performance note: function type arguments evaluated uniform grid alpha = seq(0, 1, 0.01). use custom resolution, supply explicit data frame instead function.","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"formal-definition-dong-et-al-","dir":"Reference","previous_headings":"","what":"Formal definition (Dong et al., 2022)","title":"Plot f-differential privacy trade-off functions — fdp","text":"two probability distributions \\(P\\) \\(Q\\) space, trade-function $$T(P,Q) \\colon [0,1] \\[0,1]$$ characterises optimal relationship Type Type II errors hypothesis test distinguishing . defined : $$T(P, Q)(\\alpha) = \\inf \\left\\{ \\beta_\\phi \\colon \\alpha_\\phi \\leq \\alpha \\right\\}$$ infimum taken measurable rejection rules \\(\\phi\\). terms \\(\\alpha_\\phi = \\mathbb{E}_P[\\phi]\\) \\(\\beta_\\phi = 1 - \\mathbb{E}_Q[\\phi]\\) represent Type Type II errors, respectively. function \\(f \\colon [0,1] \\[0,1]\\) trade-function convex, continuous, non-increasing, satisfies \\(f(x) \\le 1-x\\) \\(x \\[0,1]\\). context differential privacy, interested distributions output randomised algorithm run two neighbouring datasets (datasets differ single record), \\(S\\) \\(S'\\). Let \\(M\\) randomised algorithm output probability distribution denoted \\(M(S)\\) applied dataset \\(S\\). , pair neighbouring datasets generate specific trade-function \\(T(M(S), M(S'))\\) characterises hard distinguish whether dataset \\(S\\) \\(S'\\) used produce released output. Considering possible neighbouring datasets leads family trade-functions, lower bound determines privacy randomised algorithm. formally, let \\(f\\) trade-function. randomised algorithm \\(M\\) said \\(f\\)-differentially private (f-DP) pair neighbouring datasets \\(S\\) \\(S'\\), following condition holds: $$T(M(S), M(S')) \\ge f$$ definition means task distinguishing whether mechanism run dataset \\(S\\) neighbour \\(S'\\) least difficult distinguishing two canonical distributions whose trade-function \\(f\\). Therefore, function concerned plotting \\(T(P,Q) \\colon [0,1] \\[0,1]\\) \\(f \\colon [0,1] \\[0,1]\\). , plotting function returns smallest type-II error specified type-error rate.","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot f-differential privacy trade-off functions — fdp","text":"Andrew, . M. (1979). “Another efficient algorithm convex hulls two dimensions”. Information Processing Letters, 9(5), 216–219. doi:10.1016/0020-0190(79)90072-3 . Dong, J., Roth, . Su, W.J. (2022). “Gaussian Differential Privacy”. Journal Royal Statistical Society Series B, 84(1), 3–37. doi:10.1111/rssb.12454 .","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot f-differential privacy trade-off functions — fdp","text":"","code":"# Plotting mu=1 Gaussian differential privacy fdp(gdp(1))   # Plotting the f_(epsilon,delta) curve corresponding to (1, 0.1)-differential privacy fdp(epsdelta(1, 0.1))   # These can be plotted together for comparison fdp(gdp(1), epsdelta(1, 0.1))   # The same curves custom labels and a custom legend header fdp(\"Gaussian DP\" = gdp(1),     \"Classical DP\" = epsdelta(1, 0.1),     .legend = \"Methods\")   # Alternatively, combine separate fdp() calls using + fdp(gdp(1)) + fdp(epsdelta(1, 0.1))"},{"path":"https://fdp.louisaslett.com/reference/fdp_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Control rendering of f-DP trade-off functions — fdp_attributes","title":"Control rendering of f-DP trade-off functions — fdp_attributes","text":"functions attach attributes f-DP objects control visualization: fdp_line() forces object rendered continuous trade-function curve. function validates resulting curve convex (requirement valid trade-functions). Use analytic trade-functions want ensure convexity checked. fdp_point() forces object rendered individual Type /II error coordinates, lower convex hull automatically computed drawn. Use empirical estimates small datasets individual points visible. fdp_name() sets retrieves legend label object. called nm, sets label; called without nm, returns current label. fdp_attributes() retrieves f-DP related attributes attached object. default, fdp() automatically determines rendering method: data frames vectors \\(\\ge 100\\) elements treated lines (convexity validation), \\(< 100\\) elements treated points (lower hull computation).","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control rendering of f-DP trade-off functions — fdp_attributes","text":"","code":"fdp_attributes(x)  fdp_line(x)  fdp_point(x, hide = FALSE)  fdp_name(x, nm)"},{"path":"https://fdp.louisaslett.com/reference/fdp_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control rendering of f-DP trade-off functions — fdp_attributes","text":"x f-DP object (function, data frame, vector) attributes added retrieved. hide Logical; TRUE, individual points drawn (lower convex hull shown). nm Character string specifying legend label. missing, returns current label.","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control rendering of f-DP trade-off functions — fdp_attributes","text":"fdp_line(), fdp_point(), fdp_name() (setting): input object x modified attributes (returned invisibly). fdp_name() (getting) fdp_attributes(): requested attribute value(s) NULL.","code":""},{"path":"https://fdp.louisaslett.com/reference/fdp_attributes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Control rendering of f-DP trade-off functions — fdp_attributes","text":"Functions control f-differential privacy trade-functions empirical Type /II error points rendered fdp().","code":""},{"path":[]},{"path":"https://fdp.louisaslett.com/reference/fdp_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control rendering of f-DP trade-off functions — fdp_attributes","text":"","code":"# Force a small dataset to be drawn as a line (with convexity check) df <- data.frame(alpha = c(0, 0.5, 1), beta = c(1, 0.4, 0)) fdp(fdp_line(df))   # Draw points but hide them (only show the lower hull) fdp(fdp_point(df, hide = TRUE))   # Conversely, the following points if interpolated do not define a convex # trade-off function, so fdp_line would fail df2 <- data.frame(alpha = c(0, 0.5, 0.51, 1), beta = c(1, 0.4, 0.34, 0)) #fdp(fdp_line(df2)) # Not run, would error # But the following is ok, since we will compute lower convex hull due to # small number of points fdp(df2)   # If you have a large number of points which will not interpolate to give # convexity, then fdp_point can force that behaviour df3 <- gdp(0.5)() df3$beta <- pmin(df3$beta * rnorm(101, 0.95, sd=0.025), 1.0) #fdp(df3) # Not run, would error # But wrapping in fdp_point forces plotting points and lower convex hull fdp(fdp_point(df3))   # Set a custom legend label programmatically, rather than via argument in # call to fdp ... eg alternative is fdp(`my label` = my_gdp) my_gdp <- gdp(1) my_gdp <- fdp_name(my_gdp, \"Custom GDP Label\") fdp(my_gdp)"},{"path":"https://fdp.louisaslett.com/reference/gdp.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian differential privacy trade-off function — gdp","title":"Gaussian differential privacy trade-off function — gdp","text":"Constructs trade-function corresponding \\(\\mu\\)-Gaussian differential privacy (GDP). framework, introduced Dong et al. (2022), provides natural privacy guarantee mechanisms based Gaussian noise, typically offering tighter composition properties better privacy-utility trade-classical \\((\\varepsilon, \\delta)\\)-differential privacy.","code":""},{"path":"https://fdp.louisaslett.com/reference/gdp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian differential privacy trade-off function — gdp","text":"","code":"gdp(mu = 1)"},{"path":"https://fdp.louisaslett.com/reference/gdp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian differential privacy trade-off function — gdp","text":"mu Numeric scalar specifying \\(\\mu\\) privacy parameter. Must non-negative.","code":""},{"path":"https://fdp.louisaslett.com/reference/gdp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian differential privacy trade-off function — gdp","text":"function class c(\"fdp_gdp_tradeoff\", \"function\") computes \\(\\mu\\)-GDP trade-function. called: Without arguments: Returns data frame columns alpha beta containing points canonical grid (alpha = seq(0, 1, = 0.01)) trade-function. alpha argument: Returns data frame columns alpha beta containing Type-II error values corresponding specified Type-error rates.","code":""},{"path":"https://fdp.louisaslett.com/reference/gdp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gaussian differential privacy trade-off function — gdp","text":"Creates \\(\\mu\\)-Gaussian differential privacy trade-function use f-DP analysis visualisation. like reminder formal definition \\(\\mu\\)-GDP, please see documentation page \"Formal definition\" Section. function returns closure stores \\(\\mu\\) parameter environment. function can called without argument supplied, either obtain points canonical grid particular Type-II error rates given Type-errors respectively.","code":""},{"path":"https://fdp.louisaslett.com/reference/gdp.html","id":"formal-definition","dir":"Reference","previous_headings":"","what":"Formal definition","title":"Gaussian differential privacy trade-off function — gdp","text":"Gaussian differential privacy (Dong et al., 2022) arises trade-function corresponding distinguishing two Normal distributions unit variance means differing \\(\\mu\\). Without loss generality, trade-function therefore, $$G_\\mu := T\\left(N(0, 1), N(\\mu, 1)\\right) \\quad\\text{}\\quad \\mu \\ge 0.$$ leads , $$G_\\mu(\\alpha) = \\Phi\\left(\\Phi^{-1}(1-\\alpha)-\\mu\\right)$$ \\(\\Phi\\) standard Normal cumulative distribution function. natural way satisfy \\(\\mu\\)-GDP adding Gaussian noise construct randomised algorithm. Theorem 1 Dong et al. (2022) identifies correct variance noise given sensitivity statistic released. Let \\(\\theta(S)\\) statistic data \\(S\\) released. Gaussian mechanism defined $$M(S) := \\theta(S) + \\eta$$ \\(\\eta \\sim N(0, \\Delta(\\theta)^2 / \\mu^2)\\) , $$\\Delta(\\theta) := \\sup_{S, S'} |\\theta(S) - \\theta(S')|$$ supremum taken neighbouring data sets. randomised algorithm \\(M(\\cdot)\\) \\(\\mu\\)-GDP release \\(\\theta(S)\\). generally, mechanism \\(M(\\cdot)\\) satisfies \\(\\mu\\)-GDP , $$T\\left(M(S), M(S')\\right) \\ge G_\\mu$$ neighbouring data sets \\(S, S'\\). particular, one can seek minimal \\(\\mu\\) collection trade-functions using est_gdp().","code":""},{"path":"https://fdp.louisaslett.com/reference/gdp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gaussian differential privacy trade-off function — gdp","text":"Dong, J., Roth, . Su, W.J. (2022). “Gaussian Differential Privacy”. Journal Royal Statistical Society Series B, 84(1), 3–37. doi:10.1111/rssb.12454 .","code":""},{"path":[]},{"path":"https://fdp.louisaslett.com/reference/gdp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gaussian differential privacy trade-off function — gdp","text":"","code":"# Gaussian DP with mu = 1 gdp_1 <- gdp(1.0) gdp_1 #> Gaussian Differential Privacy Trade-off Function #>   Parameters: #>     μ = 1 gdp_1()  # View points on the canonical grid #>     alpha         beta #> 1    0.00 1.0000000000 #> 2    0.01 0.9076377519 #> 3    0.02 0.8540010552 #> 4    0.03 0.8107852300 #> 5    0.04 0.7735791962 #> 6    0.05 0.7404889772 #> 7    0.06 0.7104752348 #> 8    0.07 0.6828883689 #> 9    0.08 0.6572875447 #> 10   0.09 0.6333559978 #> 11   0.10 0.6108563084 #> 12   0.11 0.5896046545 #> 13   0.12 0.5694549941 #> 14   0.13 0.5502888381 #> 15   0.14 0.5320083619 #> 16   0.15 0.5145316046 #> 17   0.16 0.4977890266 #> 18   0.17 0.4817209820 #> 19   0.18 0.4662758214 #> 20   0.19 0.4514084439 #> 21   0.20 0.4370791723 #> 22   0.21 0.4232528681 #> 23   0.22 0.4098982255 #> 24   0.23 0.3969872025 #> 25   0.24 0.3844945564 #> 26   0.25 0.3723974632 #> 27   0.26 0.3606752006 #> 28   0.27 0.3493088835 #> 29   0.28 0.3382812416 #> 30   0.29 0.3275764304 #> 31   0.30 0.3171798704 #> 32   0.31 0.3070781087 #> 33   0.32 0.2972587003 #> 34   0.33 0.2877101051 #> 35   0.34 0.2784215977 #> 36   0.35 0.2693831893 #> 37   0.36 0.2605855587 #> 38   0.37 0.2520199920 #> 39   0.38 0.2436783284 #> 40   0.39 0.2355529131 #> 41   0.40 0.2276365547 #> 42   0.41 0.2199224878 #> 43   0.42 0.2124043388 #> 44   0.43 0.2050760958 #> 45   0.44 0.1979320814 #> 46   0.45 0.1909669276 #> 47   0.46 0.1841755545 #> 48   0.47 0.1775531493 #> 49   0.48 0.1710951484 #> 50   0.49 0.1647972211 #> 51   0.50 0.1586552539 #> 52   0.51 0.1526653374 #> 53   0.52 0.1468237531 #> 54   0.53 0.1411269626 #> 55   0.54 0.1355715965 #> 56   0.55 0.1301544453 #> 57   0.56 0.1248724502 #> 58   0.57 0.1197226955 #> 59   0.58 0.1147024006 #> 60   0.59 0.1098089140 #> 61   0.60 0.1050397066 #> 62   0.61 0.1003923662 #> 63   0.62 0.0958645924 #> 64   0.63 0.0914541921 #> 65   0.64 0.0871590747 #> 66   0.65 0.0829772492 #> 67   0.66 0.0789068198 #> 68   0.67 0.0749459839 #> 69   0.68 0.0710930285 #> 70   0.69 0.0673463289 #> 71   0.70 0.0637043461 #> 72   0.71 0.0601656256 #> 73   0.72 0.0567287967 #> 74   0.73 0.0533925714 #> 75   0.74 0.0501557444 #> 76   0.75 0.0470171936 #> 77   0.76 0.0439758806 #> 78   0.77 0.0410308527 #> 79   0.78 0.0381812448 #> 80   0.79 0.0354262826 #> 81   0.80 0.0327652865 #> 82   0.81 0.0301976767 #> 83   0.82 0.0277229801 #> 84   0.83 0.0253408386 #> 85   0.84 0.0230510191 #> 86   0.85 0.0208534277 #> 87   0.86 0.0187481260 #> 88   0.87 0.0167353529 #> 89   0.88 0.0148155531 #> 90   0.89 0.0129894138 #> 91   0.90 0.0112579145 #> 92   0.91 0.0096223948 #> 93   0.92 0.0080846496 #> 94   0.93 0.0066470682 #> 95   0.94 0.0053128444 #> 96   0.95 0.0040863131 #> 97   0.96 0.0029735303 #> 98   0.97 0.0019833765 #> 99   0.98 0.0011300058 #> 100  0.99 0.0004399602 #> 101  1.00 0.0000000000  # Stronger privacy with mu = 0.5 gdp_strong <- gdp(0.5) gdp_strong #> Gaussian Differential Privacy Trade-off Function #>   Parameters: #>     μ = 0.5  # Evaluate at specific Type-I error rates gdp_1(c(0.05, 0.1, 0.25, 0.5)) #>   alpha      beta #> 1  0.05 0.7404890 #> 2  0.10 0.6108563 #> 3  0.25 0.3723975 #> 4  0.50 0.1586553  # Plot and compare different mu values fdp(gdp(0.5),     gdp(1.0),     gdp(2.0))   # Compare Gaussian DP with classical (epsilon, delta)-DP fdp(gdp(1.0),     epsdelta(1.0),     epsdelta(1.0, 0.01),     .legend = \"Privacy Mechanism\")"},{"path":"https://fdp.louisaslett.com/reference/gdp_to_epsdelta.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Gaussian differential privacy to classical (epsilon, delta)-differential privacy — gdp_to_epsdelta","title":"Convert Gaussian differential privacy to classical (epsilon, delta)-differential privacy — gdp_to_epsdelta","text":"Computes exact \\((\\varepsilon, \\delta)\\)-differential privacy guarantee corresponding given \\(\\mu\\)-Gaussian differential privacy (GDP) mechanism specified \\(\\varepsilon\\) value. conversion based closed-form relationship established Corollary 1 (p.16) Dong et al. (2022), provides tightest possible \\(\\delta\\) given \\(\\varepsilon\\) \\(\\mu\\).","code":""},{"path":"https://fdp.louisaslett.com/reference/gdp_to_epsdelta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Gaussian differential privacy to classical (epsilon, delta)-differential privacy — gdp_to_epsdelta","text":"","code":"gdp_to_epsdelta(mu = 0.5, epsilon = 1, dp = NULL)"},{"path":"https://fdp.louisaslett.com/reference/gdp_to_epsdelta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Gaussian differential privacy to classical (epsilon, delta)-differential privacy — gdp_to_epsdelta","text":"mu Numeric scalar specifying \\(\\mu\\) parameter Gaussian differential privacy mechanism. Must non-negative. epsilon Numeric scalar specifying target \\(\\varepsilon\\) privacy parameter. Must non-negative. function computes minimal \\(\\delta\\) \\(\\mu\\)-GDP implies \\((\\varepsilon, \\delta)\\)-DP. dp Optional integer specifying number decimal places rounding computed \\(\\delta\\) value. provided, \\(\\delta\\) rounded ensure privacy guarantee remains valid. NULL (default), exact value returned without rounding. Must positive integer specified.","code":""},{"path":"https://fdp.louisaslett.com/reference/gdp_to_epsdelta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Gaussian differential privacy to classical (epsilon, delta)-differential privacy — gdp_to_epsdelta","text":"\\((\\varepsilon, \\delta)\\)-DP trade-function object (see epsdelta()) class c(\"fdp_epsdelta_tradeoff\", \"function\").","code":""},{"path":"https://fdp.louisaslett.com/reference/gdp_to_epsdelta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Gaussian differential privacy to classical (epsilon, delta)-differential privacy — gdp_to_epsdelta","text":"GDP provides complete characterisation privacy trade-function, classical \\((\\varepsilon, \\delta)\\)-differential privacy remains widely recognised privacy definition theoretical applied research. function enables practitioners translate GDP guarantees familiar \\((\\varepsilon, \\delta)\\)-DP language. mechanism satisfying \\(\\mu\\)-GDP, exact \\((\\varepsilon, \\delta)\\)-DP guarantee given Corollary 1 Dong et al. (2022): $$\\delta(\\varepsilon, \\mu) = \\Phi\\left(-\\frac{\\varepsilon}{\\mu} + \\frac{\\mu}{2}\\right) - e^\\varepsilon \\Phi\\left(-\\frac{\\varepsilon}{\\mu} - \\frac{\\mu}{2}\\right)$$ \\(\\Phi\\) denotes cumulative distribution function standard Normal distribution. result originally proved Balle Wang (2018).","code":""},{"path":"https://fdp.louisaslett.com/reference/gdp_to_epsdelta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert Gaussian differential privacy to classical (epsilon, delta)-differential privacy — gdp_to_epsdelta","text":"Balle, B. Wang, Y-X. (2018). “Improving Gaussian Mechanism Differential Privacy: Analytical Calibration Optimal Denoising”. Proceedings 35th International Conference Machine Learning, 80, 394–403. Available : https://proceedings.mlr.press/v80/balle18a.html. Dong, J., Roth, . Su, W.J. (2022). “Gaussian Differential Privacy”. Journal Royal Statistical Society Series B, 84(1), 3–37. doi:10.1111/rssb.12454 .","code":""},{"path":[]},{"path":"https://fdp.louisaslett.com/reference/gdp_to_epsdelta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Gaussian differential privacy to classical (epsilon, delta)-differential privacy — gdp_to_epsdelta","text":"","code":"# Convert mu = 1 GDP to (epsilon, delta)-DP with epsilon = 1 dp_guarantee <- gdp_to_epsdelta(mu = 1.0, epsilon = 1.0) dp_guarantee #> (ε, δ)-Differential Privacy Trade-off Function #>   Parameters: #>     ε = 1 #>     δ = 0.126936737506644  # Round delta to 6 decimal places for reporting dp_rounded <- gdp_to_epsdelta(mu = 1.0, epsilon = 1.0, dp = 6) dp_rounded #> (ε, δ)-Differential Privacy Trade-off Function #>   Parameters: #>     ε = 1 #>     δ = 0.126937  # Compare the original GDP with its (epsilon, delta)-DP representation fdp(gdp(1.0),     gdp_to_epsdelta(mu = 1.0, epsilon = 1.0),     .legend = \"Privacy Mechanism\")   # Explore how delta varies with epsilon for a fixed mu mu_fixed <- 1.0 epsilons <- c(0.1, 0.5, 1.0, 2.0)  res <- fdp(gdp(mu_fixed)) for (eps in epsilons) {   res <- res+fdp(gdp_to_epsdelta(mu = mu_fixed, epsilon = eps)) } res"},{"path":"https://fdp.louisaslett.com/reference/lap.html","id":null,"dir":"Reference","previous_headings":"","what":"Laplace differential privacy trade-off function — lap","title":"Laplace differential privacy trade-off function — lap","text":"Constructs trade-function corresponding \\(\\mu\\)-Laplace differential privacy. corresponds randomised algorithm based Laplace (double exponential) noise, canonical mechanism original differential privacy framework (Dwork et al., 2006).","code":""},{"path":"https://fdp.louisaslett.com/reference/lap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Laplace differential privacy trade-off function — lap","text":"","code":"lap(mu = 1)"},{"path":"https://fdp.louisaslett.com/reference/lap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Laplace differential privacy trade-off function — lap","text":"mu Numeric scalar specifying \\(\\mu\\) privacy parameter. Must non-negative.","code":""},{"path":"https://fdp.louisaslett.com/reference/lap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Laplace differential privacy trade-off function — lap","text":"function class c(\"fdp_lap_tradeoff\", \"function\") computes \\(\\mu\\)-Laplace DP trade-function. called: Without arguments: Returns data frame columns alpha beta containing skeleton points trade-function. alpha argument: Returns data frame columns alpha beta containing Type-II error values corresponding specified Type-error rates.","code":""},{"path":"https://fdp.louisaslett.com/reference/lap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Laplace differential privacy trade-off function — lap","text":"Creates \\(\\mu\\)-Laplace differential privacy trade-function use f-DP analysis visualisation. like reminder formal definition \\(\\mu\\)-Laplace DP, please see documentation page \"Formal definition\" Section. function returns closure stores \\(\\mu\\) parameter environment. function can called without argument supplied, either obtain points canonical grid particular Type-II error rates given Type-errors respectively.","code":""},{"path":"https://fdp.louisaslett.com/reference/lap.html","id":"formal-definition","dir":"Reference","previous_headings":"","what":"Formal definition","title":"Laplace differential privacy trade-off function — lap","text":"Laplace differential privacy arises trade-function corresponding distinguishing two Laplace distributions unit scale parameter locations differing \\(\\mu\\). Without loss generality, trade-function therefore, $$L_\\mu := T\\left(\\text{Lap}(0, 1), \\text{Lap}(\\mu, 1)\\right) \\quad\\text{}\\quad \\mu \\ge 0.$$ natural way satisfy \\(\\mu\\)-Laplace DP adding Laplace noise construct randomised algorithm. canonical noise mechanism used classical \\(\\varepsilon\\)-differential privacy. Let \\(\\theta(S)\\) statistic data \\(S\\) released. Laplace mechanism defined $$M(S) := \\theta(S) + \\eta$$ \\(\\eta \\sim \\text{Lap}(0, \\Delta(\\theta) / \\mu)\\) , $$\\Delta(\\theta) := \\sup_{S, S'} |\\theta(S) - \\theta(S')|$$ supremum taken neighbouring data sets. randomised algorithm \\(M(\\cdot)\\) \\(\\mu\\)-Laplace DP release \\(\\theta(S)\\). classical regime, corresponds Laplace mechanism satisfies \\((\\varepsilon=\\mu)\\)-differential privacy (Dwork et al., 2006). generally, mechanism \\(M(\\cdot)\\) satisfies \\(\\mu\\)-Laplace DP , $$T\\left(M(S), M(S')\\right) \\ge L_\\mu$$ neighbouring data sets \\(S, S'\\). f-differential privacy framework, canonical noise mechanism Gaussian (see gdp()), \\(\\mu\\)-Laplace DP arise trade-function limit group privacy \\(\\varepsilon\\)-DP group size goes infinity (see Proposition 7, Dong et al., 2022).","code":""},{"path":"https://fdp.louisaslett.com/reference/lap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Laplace differential privacy trade-off function — lap","text":"Dong, J., Roth, . Su, W.J. (2022). “Gaussian Differential Privacy”. Journal Royal Statistical Society Series B, 84(1), 3–37. doi:10.1111/rssb.12454 . Dwork, C., McSherry, F., Nissim, K. Smith, . (2006) “Calibrating Noise Sensitivity Private Data Analysis”. : Theory Cryptography, 265–284. doi:10.1007/11681878_14 .","code":""},{"path":[]},{"path":"https://fdp.louisaslett.com/reference/lap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Laplace differential privacy trade-off function — lap","text":"","code":"# Laplace DP with mu = 1 lap_1 <- lap(1.0) lap_1 #> Laplace Differential Privacy Trade-off Function #>   Parameters: #>     μ = 1 lap_1()  # View points on the canonical grid #>        alpha      beta #> 1  0.0000000 1.0000000 #> 2  0.1839397 0.5000000 #> 3  0.1900000 0.4840519 #> 4  0.2000000 0.4598493 #> 5  0.2100000 0.4379517 #> 6  0.2200000 0.4180448 #> 7  0.2300000 0.3998690 #> 8  0.2400000 0.3832078 #> 9  0.2500000 0.3678794 #> 10 0.2600000 0.3537302 #> 11 0.2700000 0.3406291 #> 12 0.2800000 0.3284638 #> 13 0.2900000 0.3171374 #> 14 0.3000000 0.3065662 #> 15 0.3100000 0.2966770 #> 16 0.3200000 0.2874058 #> 17 0.3300000 0.2786965 #> 18 0.3400000 0.2704996 #> 19 0.3500000 0.2627710 #> 20 0.3600000 0.2554718 #> 21 0.3700000 0.2485672 #> 22 0.3800000 0.2420259 #> 23 0.3900000 0.2358202 #> 24 0.4000000 0.2299247 #> 25 0.4100000 0.2243167 #> 26 0.4200000 0.2189759 #> 27 0.4300000 0.2138834 #> 28 0.4400000 0.2090224 #> 29 0.4500000 0.2043775 #> 30 0.4600000 0.1999345 #> 31 0.4700000 0.1956806 #> 32 0.4800000 0.1916039 #> 33 0.4900000 0.1876936 #> 34 0.5000000 0.1839397 #> 35 1.0000000 0.0000000  # Plot and compare different mu values fdp(lap(0.5),     lap(1.0),     lap(2.0))   # Notice that (epsilon=1)-differential privacy is indeed 1-Laplace DP # The gap between the lines is the inefficiency in the privacy # characterisation of classical differential privacy fdp(lap(1),     epsdelta(1))   # Compare Laplace DP with Gaussian DP and classical (epsilon, delta)-DP fdp(lap(1.0),     gdp(1.0),     epsdelta(1.0),     .legend = \"Privacy Mechanism\")"},{"path":"https://fdp.louisaslett.com/reference/plus-.fdp_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine fdp plots — +.fdp_plot","title":"Combine fdp plots — +.fdp_plot","text":"Allows combining multiple fdp() plot objects using + operator.","code":""},{"path":"https://fdp.louisaslett.com/reference/plus-.fdp_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine fdp plots — +.fdp_plot","text":"","code":"# S3 method for class 'fdp_plot' e1 + e2"},{"path":"https://fdp.louisaslett.com/reference/plus-.fdp_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine fdp plots — +.fdp_plot","text":"e1 fdp_plot object (result calling fdp()) e2 Either another fdp_plot object ggplot2 layer","code":""},{"path":"https://fdp.louisaslett.com/reference/plus-.fdp_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine fdp plots — +.fdp_plot","text":"e2 fdp_plot, returns new combined fdp_plot object. e2 ggplot2 layer, returns modified ggplot2 object.","code":""},{"path":"https://fdp.louisaslett.com/reference/plus-.fdp_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine fdp plots — +.fdp_plot","text":"","code":"# Combine two separate fdp() calls fdp(gdp(0.5)) + fdp(lap(1))   # Can still add regular ggplot2 layers fdp(gdp(1)) + ggplot2::ggtitle(\"My Privacy Plot\")   # First legend naming takes precedence fdp(gdp(0.5), .legend = \"First\") + fdp(lap(1), .legend = \"Second\")  # Later .legend arguments apply if none specified in prior calls fdp(gdp(0.5)) + fdp(lap(1), .legend = \"Second\")"},{"path":"https://fdp.louisaslett.com/news/index.html","id":"fdp-100","dir":"Changelog","previous_headings":"","what":"fdp 1.0.0","title":"fdp 1.0.0","text":"Initial package release!","code":""}]
